# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sk211ZvcsLhuz-dFTHEbISOpqw3HVG-4
"""

import pandas as pd
import numpy as np

data =pd.read_csv('Bengaluru_House_Data.csv')

data.head()  #shows the first 5 rows.

data.shape #gives number of rows & columns.

data.info() #gives column names, types, and null count.

for column in data.columns:
  print(data[column].value_counts())
  print("*"*20)

#null values
data.isna().sum()

data.drop(columns=['area_type', 'availability','society','balcony'],inplace=True)

data.describe()

data.info() # shows structure again after dropping columns.

data['location'].value_counts()

data['location'] = data['location'].fillna('Sarjapur Road')

data['size'].value_counts()

data['size'] = data['size'].fillna('2 BHK')

data['bath'] = data['bath'].fillna(data['bath'].median())

data.info()

data['bhk'] = data['size'].str.split().str.get(0).astype(int)

data[data.bhk > 20]

data['total_sqft'].unique()

def convertRange(x):

  temp = x.split('_')
  if len(temp)==2:
    return(float(temp[0])+float(temp[1]))/2
  try:
    return float(x)
  except:
    return None

data['total_sqft']=data['total_sqft'].apply(convertRange)

data.head()

# Price per Square feet

data['price_per_sqft']=data['price'] *100000 / data['total_sqft']

data['price_per_sqft']

data.describe()

data['location'].value_counts()

data['location'] = data['location'].apply(lambda x: x.strip())
location_count = data['location'].value_counts()

location_count_less_10 = location_count[location_count<=10]
location_count_less_10

data['location']=data['location'].apply(lambda x: 'other' if x in location_count_less_10 else x)

data['location'].value_counts()

# Outlier detection and removal

data.describe()

(data['total_sqft']/data['bhk']).describe()

data = data[((data['total_sqft']/data['bhk']) >= 300)]
data.describe()

data.shape

data.price_per_sqft.describe()

data = data[((data['total_sqft']/data['bhk']) >= 300)]
data.describe()

data.shape

data.price_per_sqft.describe()

def remove_outliners_sqft(df):
  df_output=pd.DataFrame()
  for key,subdf in df.groupby('location'):
    m=np.mean(subdf.price_per_sqft)

    st=np.std(subdf.price_per_sqft)

    gen_df= subdf[(subdf.price_per_sqft > (m-st)) & (subdf.price_per_sqft <= (m+st))]
    df_output= pd.concat([df_output,gen_df],ignore_index = True)
  return df_output
data =remove_outliners_sqft(data)
data.describe()

def bhk_outlier_remover(df):
  exclude_indices = np.array([])
  for location, location_df in df.groupby('location'):
    bhk_stats = {}
    for bhk, bhk_df in location_df.groupby('bhk'):
      bhk_stats[bhk] = {
          'mean': np.mean(bhk_df.price_per_sqft),
          'std' : np.std(bhk_df.price_per_sqft),
          'count' : bhk_df.shape[0]
      }

    for bhk, bhk_df in location_df.groupby('bhk'):
      stats = bhk_stats.get(bhk-1)
      if stats and stats['count']>5:
        exclude_indices = np.append(exclude_indices, bhk_df[bhk.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')

data=bhk_outlier_remover(data)

data.shape

data

data.drop(columns=['size','price_per_sqft'],inplace=True)

# Cleaned Data

data.head()

data.to_csv("Cleaned_data.csv")

X=data.drop(columns=['price'])
y=data['price']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,Lasso,Ridge
from sklearn.preprocessing import OneHotEncoder,StandardScaler
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)

print(X_train.shape)
print(X_test.shape)

# Applying Linear Regression

from sklearn.model_selection import train_test_split
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression

column_trans = make_column_transformer(
    (OneHotEncoder(sparse_output=False), ['location']),
    remainder='passthrough'
)

scaler = StandardScaler()

pipe = Pipeline([
    ('transformer', column_trans),
    ('scaler', StandardScaler()),
    ('model', LinearRegression())
])

pipe.fit(X_train,y_train)

y_pred_lr=pipe.predict(X_test)

from sklearn.metrics import r2_score

# Predict test set results
y_pred = pipe.predict(X_test)

# Evaluate model
r2 = r2_score(y_test, y_pred)
print("R² Score:", r2)

# Applying Lasso

lasso = Lasso()

pipe = make_pipeline(column_trans, scaler, lasso)

pipe.fit(X_train, y_train)

y_pred_lasso = pipe.predict(X_test)
r2_score(y_test, y_pred_lasso)

#Applying Ridge

ridge =Ridge()

pipe = make_pipeline(column_trans, scaler, ridge)

pipe.fit(X_train, y_train)

y_pred_ridge = pipe.predict(X_test)
r2_score(y_test, y_pred_ridge)

print("No Regularization: ", r2_score(y_test, y_pred_lr))
print("Lasso: ", r2_score(y_test, y_pred_lasso))
print("Ridge: ", r2_score(y_test, y_pred_ridge))

import matplotlib.pyplot as plt
from sklearn.metrics import r2_score

# Recreate and fit models with separate names to avoid overwriting
# Linear Regression
pipe_lr = Pipeline([
    ('transformer', column_trans),
    ('scaler', StandardScaler()),
    ('model', LinearRegression())
])
pipe_lr.fit(X_train, y_train)

# Lasso
pipe_lasso = Pipeline([
    ('transformer', column_trans),
    ('scaler', StandardScaler()),
    ('model', Lasso())
])
pipe_lasso.fit(X_train, y_train)

# Ridge
pipe_ridge = Pipeline([
    ('transformer', column_trans),
    ('scaler', StandardScaler()),
    ('model', Ridge())
])
pipe_ridge.fit(X_train, y_train)

# R² scores
train_scores = [
    r2_score(y_train, pipe_lr.predict(X_train)),
    r2_score(y_train, pipe_lasso.predict(X_train)),
    r2_score(y_train, pipe_ridge.predict(X_train))
]

test_scores = [
    r2_score(y_test, pipe_lr.predict(X_test)),
    r2_score(y_test, pipe_lasso.predict(X_test)),
    r2_score(y_test, pipe_ridge.predict(X_test))
]

# Plot
models = ['Linear Regression', 'Lasso', 'Ridge']

plt.figure(figsize=(8, 5))
plt.plot(models, train_scores, marker='o', label='Train R²', color='blue')
plt.plot(models, test_scores, marker='o', label='Test R²', color='orange')
plt.title('Training vs Test R² Score Comparison')
plt.xlabel('Regression Model')
plt.ylabel('R² Score')
plt.ylim(0, 1)
plt.grid(True)
plt.legend()
plt.show()

#All three models perform similarly, with R² scores around 0.80 – 0.83
#Ridge Regression has: High training accuracy , Very close test accuracy , Means least overfitting
#Lasso has slightly lower accuracy, likely due to reducing too many features

import pickle

pickle.dump(pipe, open('RidgeModel.pkl','wb'))

import gradio as gr
import pandas as pd
import numpy as np
import pickle

# Load the trained model
pipe = pickle.load(open("RidgeModel.pkl", "rb"))

# Load cleaned data to extract locations
data = pd.read_csv("Cleaned_data.csv")
location_list = sorted(data['location'].unique())

# Prediction function
def predict_price(location, sqft, bath, bhk):
    input_df = pd.DataFrame([[location, sqft, bath, bhk]],
                            columns=['location', 'total_sqft', 'bath', 'bhk'])
    prediction = pipe.predict(input_df)[0]
    return f"Predicted Price: ₹ {round(prediction, 2)} Lakhs"

# Gradio UI
gr.Interface(
    fn=predict_price,
    inputs=[
        gr.Dropdown(location_list, label="Location"),
        gr.Number(label="Total Square Feet"),
        gr.Slider(1, 10, step=1, label="Number of Bathrooms"),
        gr.Slider(1, 10, step=1, label="BHK")
    ],
    outputs=gr.Textbox(label="Result"),
    title=" House Price Prediction",
    description="Enter the details below to get the estimated price of a house."
).launch()